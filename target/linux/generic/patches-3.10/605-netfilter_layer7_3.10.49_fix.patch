--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -1011,7 +1011,6 @@ config NETFILTER_XT_MATCH_IPVS
 
 config NETFILTER_XT_MATCH_LAYER7
 	tristate '"layer7" match support'
-	depends on EXPERIMENTAL
 	depends on NETFILTER_XTABLES
 	depends on NETFILTER_ADVANCED
 	depends on NF_CONNTRACK
@@ -1224,12 +1223,6 @@ config NETFILTER_XT_MATCH_STATE
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
-config NETFILTER_XT_MATCH_LAYER7_DEBUG
-	bool 'Layer 7 debugging output'
-	depends on NETFILTER_XT_MATCH_LAYER7
-	help
-	  Say Y to get lots of debugging output.
-
 config NETFILTER_XT_MATCH_STATISTIC
 	tristate '"statistic" match support'
 	depends on NETFILTER_ADVANCED
--- a/net/netfilter/xt_layer7.c
+++ b/net/netfilter/xt_layer7.c
@@ -364,25 +364,22 @@ static int my_atoi(const char *s)
 }
 
 /* write out num_packets to userland. */
-static int layer7_read_proc(char* page, char ** start, off_t off, int count,
-                            int* eof, void * data)
+static int layer7_numpackets_show(struct seq_file *seq, void *p)
 {
-	if(num_packets > 99 && net_ratelimit())
-		printk(KERN_ERR "layer7: NOT REACHED. num_packets too big\n");
+	seq_printf(seq, "%d\n", num_packets);
 
-	page[0] = num_packets/10 + '0';
-	page[1] = num_packets%10 + '0';
-	page[2] = '\n';
-	page[3] = '\0';
-
-	*eof=1;
+	return 0;
+}
 
-	return 3;
+static int layer7_numpackets_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, layer7_numpackets_show, PDE_DATA(inode));
 }
 
 /* Read in num_packets from userland */
-static int layer7_write_proc(struct file* file, const char* buffer,
-                             unsigned long count, void *data)
+static ssize_t layer7_numpackets_write(struct file *file,
+				   const char __user * user_buffer,
+				   size_t count, loff_t * offset)
 {
 	char * foo = kmalloc(count, GFP_ATOMIC);
 
@@ -393,7 +390,7 @@ static int layer7_write_proc(struct file
 		return count;
 	}
 
-	if(copy_from_user(foo, buffer, count)) {
+	if(copy_from_user(foo, user_buffer, count)) {
 		return -EFAULT;
 	}
 
@@ -660,20 +657,22 @@ static void layer7_cleanup_proc(void)
 	remove_proc_entry("layer7_numpackets", init_net.proc_net);
 }
 
-/* register the proc file */
-static void layer7_init_proc(void)
-{
-	struct proc_dir_entry* entry;
-	entry = create_proc_entry("layer7_numpackets", 0644, init_net.proc_net);
-	entry->read_proc = layer7_read_proc;
-	entry->write_proc = layer7_write_proc;
-}
+static const struct file_operations layer7_numpackets_ops = {
+	.owner   = THIS_MODULE,
+	.open    = layer7_numpackets_open,
+	.read    = seq_read,
+	.llseek  = seq_lseek,
+	.write   = layer7_numpackets_write,
+	.release = single_release_net,
+};
 
 static int __init xt_layer7_init(void)
 {
 	need_conntrack();
 
-	layer7_init_proc();
+	proc_create_data("layer7_numpackets", 0644,
+		init_net.proc_net, &layer7_numpackets_ops, NULL);
+
 	if(maxdatalen < 1) {
 		printk(KERN_WARNING "layer7: maxdatalen can't be < 1, "
 			"using 1\n");
